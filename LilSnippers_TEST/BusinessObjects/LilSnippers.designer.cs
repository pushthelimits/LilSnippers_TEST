#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LilSnippers_TEST.BusinessObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LilSnippers")]
	public partial class LilSnippersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertCountries(Countries instance);
    partial void UpdateCountries(Countries instance);
    partial void DeleteCountries(Countries instance);
    partial void InsertEmployees(Employees instance);
    partial void UpdateEmployees(Employees instance);
    partial void DeleteEmployees(Employees instance);
    partial void InsertEmpPositions(EmpPositions instance);
    partial void UpdateEmpPositions(EmpPositions instance);
    partial void DeleteEmpPositions(EmpPositions instance);
    partial void InsertHearAbouts(HearAbouts instance);
    partial void UpdateHearAbouts(HearAbouts instance);
    partial void DeleteHearAbouts(HearAbouts instance);
    partial void InsertHomeAddress(HomeAddress instance);
    partial void UpdateHomeAddress(HomeAddress instance);
    partial void DeleteHomeAddress(HomeAddress instance);
    partial void InsertMedia(Media instance);
    partial void UpdateMedia(Media instance);
    partial void DeleteMedia(Media instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    partial void InsertMonth(Month instance);
    partial void UpdateMonth(Month instance);
    partial void DeleteMonth(Month instance);
    partial void InsertParentGuardians(ParentGuardians instance);
    partial void UpdateParentGuardians(ParentGuardians instance);
    partial void DeleteParentGuardians(ParentGuardians instance);
    partial void InsertProducts(Products instance);
    partial void UpdateProducts(Products instance);
    partial void DeleteProducts(Products instance);
    partial void InsertProductTypes(ProductTypes instance);
    partial void UpdateProductTypes(ProductTypes instance);
    partial void DeleteProductTypes(ProductTypes instance);
    partial void InsertStates(States instance);
    partial void UpdateStates(States instance);
    partial void DeleteStates(States instance);
    partial void InsertStylistTimes(StylistTimes instance);
    partial void UpdateStylistTimes(StylistTimes instance);
    partial void DeleteStylistTimes(StylistTimes instance);
    partial void InsertSuppliers(Suppliers instance);
    partial void UpdateSuppliers(Suppliers instance);
    partial void DeleteSuppliers(Suppliers instance);
    partial void InsertTransactions(Transactions instance);
    partial void UpdateTransactions(Transactions instance);
    partial void DeleteTransactions(Transactions instance);
    partial void InsertServiceS(ServiceS instance);
    partial void UpdateServiceS(ServiceS instance);
    partial void DeleteServiceS(ServiceS instance);
    partial void InsertTransaction_Detail(Transaction_Detail instance);
    partial void UpdateTransaction_Detail(Transaction_Detail instance);
    partial void DeleteTransaction_Detail(Transaction_Detail instance);
    #endregion
		
		public LilSnippersDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LilSnippers_TESTConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LilSnippersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LilSnippersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LilSnippersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LilSnippersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<Countries> Countries
		{
			get
			{
				return this.GetTable<Countries>();
			}
		}
		
		public System.Data.Linq.Table<Employees> Employees
		{
			get
			{
				return this.GetTable<Employees>();
			}
		}
		
		public System.Data.Linq.Table<EmpPositions> EmpPositions
		{
			get
			{
				return this.GetTable<EmpPositions>();
			}
		}
		
		public System.Data.Linq.Table<HearAbouts> HearAbouts
		{
			get
			{
				return this.GetTable<HearAbouts>();
			}
		}
		
		public System.Data.Linq.Table<HomeAddress> HomeAddresses
		{
			get
			{
				return this.GetTable<HomeAddress>();
			}
		}
		
		public System.Data.Linq.Table<Media> Medias
		{
			get
			{
				return this.GetTable<Media>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
		
		public System.Data.Linq.Table<Month> Months
		{
			get
			{
				return this.GetTable<Month>();
			}
		}
		
		public System.Data.Linq.Table<ParentGuardians> ParentGuardians
		{
			get
			{
				return this.GetTable<ParentGuardians>();
			}
		}
		
		public System.Data.Linq.Table<Products> Products
		{
			get
			{
				return this.GetTable<Products>();
			}
		}
		
		public System.Data.Linq.Table<ProductTypes> ProductTypes
		{
			get
			{
				return this.GetTable<ProductTypes>();
			}
		}
		
		public System.Data.Linq.Table<States> States
		{
			get
			{
				return this.GetTable<States>();
			}
		}
		
		public System.Data.Linq.Table<StylistTimes> StylistTimes
		{
			get
			{
				return this.GetTable<StylistTimes>();
			}
		}
		
		public System.Data.Linq.Table<Suppliers> Suppliers
		{
			get
			{
				return this.GetTable<Suppliers>();
			}
		}
		
		public System.Data.Linq.Table<Transactions> Transactions
		{
			get
			{
				return this.GetTable<Transactions>();
			}
		}
		
		public System.Data.Linq.Table<ServiceS> ServiceS
		{
			get
			{
				return this.GetTable<ServiceS>();
			}
		}
		
		public System.Data.Linq.Table<Transaction_Detail> Transaction_Details
		{
			get
			{
				return this.GetTable<Transaction_Detail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientFirstName;
		
		private string _ClientLastName;
		
		private System.Nullable<int> _MonthID;
		
		private System.Nullable<int> _BirthDate;
		
		private System.Nullable<int> _BirthYear;
		
		private string _HaircutNotes;
		
		private System.Nullable<int> _HomeAddressID;
		
		private EntityRef<HomeAddress> _HomeAddress;
		
		private EntityRef<Month> _Month;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientFirstNameChanging(string value);
    partial void OnClientFirstNameChanged();
    partial void OnClientLastNameChanging(string value);
    partial void OnClientLastNameChanged();
    partial void OnMonthIDChanging(System.Nullable<int> value);
    partial void OnMonthIDChanged();
    partial void OnBirthDateChanging(System.Nullable<int> value);
    partial void OnBirthDateChanged();
    partial void OnBirthYearChanging(System.Nullable<int> value);
    partial void OnBirthYearChanged();
    partial void OnHaircutNotesChanging(string value);
    partial void OnHaircutNotesChanged();
    partial void OnHomeAddressIDChanging(System.Nullable<int> value);
    partial void OnHomeAddressIDChanged();
    #endregion
		
		public Clients()
		{
			this._HomeAddress = default(EntityRef<HomeAddress>);
			this._Month = default(EntityRef<Month>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientFirstName", DbType="VarChar(50)")]
		public string ClientFirstName
		{
			get
			{
				return this._ClientFirstName;
			}
			set
			{
				if ((this._ClientFirstName != value))
				{
					this.OnClientFirstNameChanging(value);
					this.SendPropertyChanging();
					this._ClientFirstName = value;
					this.SendPropertyChanged("ClientFirstName");
					this.OnClientFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLastName", DbType="VarChar(50)")]
		public string ClientLastName
		{
			get
			{
				return this._ClientLastName;
			}
			set
			{
				if ((this._ClientLastName != value))
				{
					this.OnClientLastNameChanging(value);
					this.SendPropertyChanging();
					this._ClientLastName = value;
					this.SendPropertyChanged("ClientLastName");
					this.OnClientLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthID", DbType="Int")]
		public System.Nullable<int> MonthID
		{
			get
			{
				return this._MonthID;
			}
			set
			{
				if ((this._MonthID != value))
				{
					if (this._Month.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonthIDChanging(value);
					this.SendPropertyChanging();
					this._MonthID = value;
					this.SendPropertyChanged("MonthID");
					this.OnMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Int")]
		public System.Nullable<int> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthYear", DbType="Int")]
		public System.Nullable<int> BirthYear
		{
			get
			{
				return this._BirthYear;
			}
			set
			{
				if ((this._BirthYear != value))
				{
					this.OnBirthYearChanging(value);
					this.SendPropertyChanging();
					this._BirthYear = value;
					this.SendPropertyChanged("BirthYear");
					this.OnBirthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HaircutNotes", DbType="VarChar(MAX)")]
		public string HaircutNotes
		{
			get
			{
				return this._HaircutNotes;
			}
			set
			{
				if ((this._HaircutNotes != value))
				{
					this.OnHaircutNotesChanging(value);
					this.SendPropertyChanging();
					this._HaircutNotes = value;
					this.SendPropertyChanged("HaircutNotes");
					this.OnHaircutNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddressID", DbType="Int")]
		public System.Nullable<int> HomeAddressID
		{
			get
			{
				return this._HomeAddressID;
			}
			set
			{
				if ((this._HomeAddressID != value))
				{
					if (this._HomeAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeAddressIDChanging(value);
					this.SendPropertyChanging();
					this._HomeAddressID = value;
					this.SendPropertyChanged("HomeAddressID");
					this.OnHomeAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_Clients", Storage="_HomeAddress", ThisKey="HomeAddressID", OtherKey="HomeAddressID", IsForeignKey=true)]
		public HomeAddress HomeAddress
		{
			get
			{
				return this._HomeAddress.Entity;
			}
			set
			{
				HomeAddress previousValue = this._HomeAddress.Entity;
				if (((previousValue != value) 
							|| (this._HomeAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HomeAddress.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._HomeAddress.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._HomeAddressID = value.HomeAddressID;
					}
					else
					{
						this._HomeAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HomeAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Month_Clients", Storage="_Month", ThisKey="MonthID", OtherKey="MonthID", IsForeignKey=true)]
		public Month Month
		{
			get
			{
				return this._Month.Entity;
			}
			set
			{
				Month previousValue = this._Month.Entity;
				if (((previousValue != value) 
							|| (this._Month.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Month.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Month.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._MonthID = value.MonthID;
					}
					else
					{
						this._MonthID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Month");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Countries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _Country1;
		
		private EntitySet<Suppliers> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountry1Changing(string value);
    partial void OnCountry1Changed();
    #endregion
		
		public Countries()
		{
			this._Suppliers = new EntitySet<Suppliers>(new Action<Suppliers>(this.attach_Suppliers), new Action<Suppliers>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Country", Storage="_Country1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country1
		{
			get
			{
				return this._Country1;
			}
			set
			{
				if ((this._Country1 != value))
				{
					this.OnCountry1Changing(value);
					this.SendPropertyChanging();
					this._Country1 = value;
					this.SendPropertyChanged("Country1");
					this.OnCountry1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countries_Suppliers", Storage="_Suppliers", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Suppliers> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Suppliers entity)
		{
			this.SendPropertyChanging();
			entity.Countries = this;
		}
		
		private void detach_Suppliers(Suppliers entity)
		{
			this.SendPropertyChanging();
			entity.Countries = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmpFirstName;
		
		private string _EmpLastName;
		
		private string _EmpAddress1;
		
		private string _EmpAddress2;
		
		private string _EmpCity;
		
		private System.Nullable<int> _StateID;
		
		private string _EmpZIP;
		
		private string _EmpPhone;
		
		private string _EmpEmail;
		
		private string _EmpBirthDate;
		
		private string _HireDate;
		
		private System.Nullable<decimal> _HourlyWage;
		
		private string _TaxStatus;
		
		private string _NumExemptions;
		
		private System.Nullable<int> _EmpPositionID;
		
		private EntitySet<StylistTimes> _StylistTimes;
		
		private EntitySet<Transactions> _Transactions;
		
		private EntityRef<EmpPositions> _EmpPosition;
		
		private EntityRef<States> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmpFirstNameChanging(string value);
    partial void OnEmpFirstNameChanged();
    partial void OnEmpLastNameChanging(string value);
    partial void OnEmpLastNameChanged();
    partial void OnEmpAddress1Changing(string value);
    partial void OnEmpAddress1Changed();
    partial void OnEmpAddress2Changing(string value);
    partial void OnEmpAddress2Changed();
    partial void OnEmpCityChanging(string value);
    partial void OnEmpCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnEmpZIPChanging(string value);
    partial void OnEmpZIPChanged();
    partial void OnEmpPhoneChanging(string value);
    partial void OnEmpPhoneChanged();
    partial void OnEmpEmailChanging(string value);
    partial void OnEmpEmailChanged();
    partial void OnEmpBirthDateChanging(string value);
    partial void OnEmpBirthDateChanged();
    partial void OnHireDateChanging(string value);
    partial void OnHireDateChanged();
    partial void OnHourlyWageChanging(System.Nullable<decimal> value);
    partial void OnHourlyWageChanged();
    partial void OnTaxStatusChanging(string value);
    partial void OnTaxStatusChanged();
    partial void OnNumExemptionsChanging(string value);
    partial void OnNumExemptionsChanged();
    partial void OnEmpPositionIDChanging(System.Nullable<int> value);
    partial void OnEmpPositionIDChanged();
    #endregion
		
		public Employees()
		{
			this._StylistTimes = new EntitySet<StylistTimes>(new Action<StylistTimes>(this.attach_StylistTimes), new Action<StylistTimes>(this.detach_StylistTimes));
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			this._EmpPosition = default(EntityRef<EmpPositions>);
			this._State = default(EntityRef<States>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpFirstName", DbType="VarChar(20)")]
		public string EmpFirstName
		{
			get
			{
				return this._EmpFirstName;
			}
			set
			{
				if ((this._EmpFirstName != value))
				{
					this.OnEmpFirstNameChanging(value);
					this.SendPropertyChanging();
					this._EmpFirstName = value;
					this.SendPropertyChanged("EmpFirstName");
					this.OnEmpFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpLastName", DbType="VarChar(30)")]
		public string EmpLastName
		{
			get
			{
				return this._EmpLastName;
			}
			set
			{
				if ((this._EmpLastName != value))
				{
					this.OnEmpLastNameChanging(value);
					this.SendPropertyChanging();
					this._EmpLastName = value;
					this.SendPropertyChanged("EmpLastName");
					this.OnEmpLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAddress1", DbType="VarChar(30)")]
		public string EmpAddress1
		{
			get
			{
				return this._EmpAddress1;
			}
			set
			{
				if ((this._EmpAddress1 != value))
				{
					this.OnEmpAddress1Changing(value);
					this.SendPropertyChanging();
					this._EmpAddress1 = value;
					this.SendPropertyChanged("EmpAddress1");
					this.OnEmpAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAddress2", DbType="VarChar(15)")]
		public string EmpAddress2
		{
			get
			{
				return this._EmpAddress2;
			}
			set
			{
				if ((this._EmpAddress2 != value))
				{
					this.OnEmpAddress2Changing(value);
					this.SendPropertyChanging();
					this._EmpAddress2 = value;
					this.SendPropertyChanged("EmpAddress2");
					this.OnEmpAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpCity", DbType="VarChar(20)")]
		public string EmpCity
		{
			get
			{
				return this._EmpCity;
			}
			set
			{
				if ((this._EmpCity != value))
				{
					this.OnEmpCityChanging(value);
					this.SendPropertyChanging();
					this._EmpCity = value;
					this.SendPropertyChanged("EmpCity");
					this.OnEmpCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpZIP", DbType="VarChar(10)")]
		public string EmpZIP
		{
			get
			{
				return this._EmpZIP;
			}
			set
			{
				if ((this._EmpZIP != value))
				{
					this.OnEmpZIPChanging(value);
					this.SendPropertyChanging();
					this._EmpZIP = value;
					this.SendPropertyChanged("EmpZIP");
					this.OnEmpZIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpPhone", DbType="VarChar(15)")]
		public string EmpPhone
		{
			get
			{
				return this._EmpPhone;
			}
			set
			{
				if ((this._EmpPhone != value))
				{
					this.OnEmpPhoneChanging(value);
					this.SendPropertyChanging();
					this._EmpPhone = value;
					this.SendPropertyChanged("EmpPhone");
					this.OnEmpPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpEmail", DbType="VarChar(30)")]
		public string EmpEmail
		{
			get
			{
				return this._EmpEmail;
			}
			set
			{
				if ((this._EmpEmail != value))
				{
					this.OnEmpEmailChanging(value);
					this.SendPropertyChanging();
					this._EmpEmail = value;
					this.SendPropertyChanged("EmpEmail");
					this.OnEmpEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpBirthDate", DbType="VarChar(10)")]
		public string EmpBirthDate
		{
			get
			{
				return this._EmpBirthDate;
			}
			set
			{
				if ((this._EmpBirthDate != value))
				{
					this.OnEmpBirthDateChanging(value);
					this.SendPropertyChanging();
					this._EmpBirthDate = value;
					this.SendPropertyChanged("EmpBirthDate");
					this.OnEmpBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="VarChar(10)")]
		public string HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyWage", DbType="Decimal(2,2)")]
		public System.Nullable<decimal> HourlyWage
		{
			get
			{
				return this._HourlyWage;
			}
			set
			{
				if ((this._HourlyWage != value))
				{
					this.OnHourlyWageChanging(value);
					this.SendPropertyChanging();
					this._HourlyWage = value;
					this.SendPropertyChanged("HourlyWage");
					this.OnHourlyWageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxStatus", DbType="VarChar(30)")]
		public string TaxStatus
		{
			get
			{
				return this._TaxStatus;
			}
			set
			{
				if ((this._TaxStatus != value))
				{
					this.OnTaxStatusChanging(value);
					this.SendPropertyChanging();
					this._TaxStatus = value;
					this.SendPropertyChanged("TaxStatus");
					this.OnTaxStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumExemptions", DbType="VarChar(2)")]
		public string NumExemptions
		{
			get
			{
				return this._NumExemptions;
			}
			set
			{
				if ((this._NumExemptions != value))
				{
					this.OnNumExemptionsChanging(value);
					this.SendPropertyChanging();
					this._NumExemptions = value;
					this.SendPropertyChanged("NumExemptions");
					this.OnNumExemptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpPositionID", DbType="Int")]
		public System.Nullable<int> EmpPositionID
		{
			get
			{
				return this._EmpPositionID;
			}
			set
			{
				if ((this._EmpPositionID != value))
				{
					if (this._EmpPosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpPositionIDChanging(value);
					this.SendPropertyChanging();
					this._EmpPositionID = value;
					this.SendPropertyChanged("EmpPositionID");
					this.OnEmpPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_StylistTimes", Storage="_StylistTimes", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<StylistTimes> StylistTimes
		{
			get
			{
				return this._StylistTimes;
			}
			set
			{
				this._StylistTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Transactions", Storage="_Transactions", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpPositions_Employees", Storage="_EmpPosition", ThisKey="EmpPositionID", OtherKey="EmpPositionID", IsForeignKey=true)]
		public EmpPositions EmpPositions
		{
			get
			{
				return this._EmpPosition.Entity;
			}
			set
			{
				EmpPositions previousValue = this._EmpPosition.Entity;
				if (((previousValue != value) 
							|| (this._EmpPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpPosition.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmpPosition.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EmpPositionID = value.EmpPositionID;
					}
					else
					{
						this._EmpPositionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpPositions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Employees", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				States previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StylistTimes(StylistTimes entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_StylistTimes(StylistTimes entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpPosition")]
	public partial class EmpPositions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpPositionID;
		
		private string _EmpPosition1;
		
		private EntitySet<Employees> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpPositionIDChanging(int value);
    partial void OnEmpPositionIDChanged();
    partial void OnEmpPosition1Changing(string value);
    partial void OnEmpPosition1Changed();
    #endregion
		
		public EmpPositions()
		{
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpPositionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmpPositionID
		{
			get
			{
				return this._EmpPositionID;
			}
			set
			{
				if ((this._EmpPositionID != value))
				{
					this.OnEmpPositionIDChanging(value);
					this.SendPropertyChanging();
					this._EmpPositionID = value;
					this.SendPropertyChanged("EmpPositionID");
					this.OnEmpPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EmpPosition", Storage="_EmpPosition1", DbType="VarChar(25)")]
		public string EmpPosition1
		{
			get
			{
				return this._EmpPosition1;
			}
			set
			{
				if ((this._EmpPosition1 != value))
				{
					this.OnEmpPosition1Changing(value);
					this.SendPropertyChanging();
					this._EmpPosition1 = value;
					this.SendPropertyChanged("EmpPosition1");
					this.OnEmpPosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpPositions_Employees", Storage="_Employees", ThisKey="EmpPositionID", OtherKey="EmpPositionID")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.EmpPositions = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.EmpPositions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HearAbout")]
	public partial class HearAbouts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HearAboutID;
		
		private string _HearAbout1;
		
		private EntitySet<HomeAddress> _HomeAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHearAboutIDChanging(int value);
    partial void OnHearAboutIDChanged();
    partial void OnHearAbout1Changing(string value);
    partial void OnHearAbout1Changed();
    #endregion
		
		public HearAbouts()
		{
			this._HomeAddresses = new EntitySet<HomeAddress>(new Action<HomeAddress>(this.attach_HomeAddresses), new Action<HomeAddress>(this.detach_HomeAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearAboutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HearAboutID
		{
			get
			{
				return this._HearAboutID;
			}
			set
			{
				if ((this._HearAboutID != value))
				{
					this.OnHearAboutIDChanging(value);
					this.SendPropertyChanging();
					this._HearAboutID = value;
					this.SendPropertyChanged("HearAboutID");
					this.OnHearAboutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="HearAbout", Storage="_HearAbout1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HearAbout1
		{
			get
			{
				return this._HearAbout1;
			}
			set
			{
				if ((this._HearAbout1 != value))
				{
					this.OnHearAbout1Changing(value);
					this.SendPropertyChanging();
					this._HearAbout1 = value;
					this.SendPropertyChanged("HearAbout1");
					this.OnHearAbout1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HearAbouts_HomeAddress", Storage="_HomeAddresses", ThisKey="HearAboutID", OtherKey="HearAboutID")]
		public EntitySet<HomeAddress> HomeAddresses
		{
			get
			{
				return this._HomeAddresses;
			}
			set
			{
				this._HomeAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HomeAddresses(HomeAddress entity)
		{
			this.SendPropertyChanging();
			entity.HearAbouts = this;
		}
		
		private void detach_HomeAddresses(HomeAddress entity)
		{
			this.SendPropertyChanging();
			entity.HearAbouts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeAddress")]
	public partial class HomeAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HomeAddressID;
		
		private string _HomeAddress1;
		
		private string _HomeAddress2;
		
		private string _HomeCity;
		
		private System.Nullable<int> _StateID;
		
		private string _HomeZIP;
		
		private string _HomePhone;
		
		private string _HomeEmail;
		
		private System.Nullable<int> _HearAboutID;
		
		private EntitySet<Clients> _Clients;
		
		private EntitySet<ParentGuardians> _ParentGuardians;
		
		private EntitySet<Transactions> _Transactions;
		
		private EntityRef<HearAbouts> _HearAbout;
		
		private EntityRef<States> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHomeAddressIDChanging(int value);
    partial void OnHomeAddressIDChanged();
    partial void OnHomeAddress1Changing(string value);
    partial void OnHomeAddress1Changed();
    partial void OnHomeAddress2Changing(string value);
    partial void OnHomeAddress2Changed();
    partial void OnHomeCityChanging(string value);
    partial void OnHomeCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnHomeZIPChanging(string value);
    partial void OnHomeZIPChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnHomeEmailChanging(string value);
    partial void OnHomeEmailChanged();
    partial void OnHearAboutIDChanging(System.Nullable<int> value);
    partial void OnHearAboutIDChanged();
    #endregion
		
		public HomeAddress()
		{
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			this._ParentGuardians = new EntitySet<ParentGuardians>(new Action<ParentGuardians>(this.attach_ParentGuardians), new Action<ParentGuardians>(this.detach_ParentGuardians));
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			this._HearAbout = default(EntityRef<HearAbouts>);
			this._State = default(EntityRef<States>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HomeAddressID
		{
			get
			{
				return this._HomeAddressID;
			}
			set
			{
				if ((this._HomeAddressID != value))
				{
					this.OnHomeAddressIDChanging(value);
					this.SendPropertyChanging();
					this._HomeAddressID = value;
					this.SendPropertyChanged("HomeAddressID");
					this.OnHomeAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddress1", DbType="VarChar(100)")]
		public string HomeAddress1
		{
			get
			{
				return this._HomeAddress1;
			}
			set
			{
				if ((this._HomeAddress1 != value))
				{
					this.OnHomeAddress1Changing(value);
					this.SendPropertyChanging();
					this._HomeAddress1 = value;
					this.SendPropertyChanged("HomeAddress1");
					this.OnHomeAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddress2", DbType="VarChar(50)")]
		public string HomeAddress2
		{
			get
			{
				return this._HomeAddress2;
			}
			set
			{
				if ((this._HomeAddress2 != value))
				{
					this.OnHomeAddress2Changing(value);
					this.SendPropertyChanging();
					this._HomeAddress2 = value;
					this.SendPropertyChanged("HomeAddress2");
					this.OnHomeAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeCity", DbType="VarChar(50)")]
		public string HomeCity
		{
			get
			{
				return this._HomeCity;
			}
			set
			{
				if ((this._HomeCity != value))
				{
					this.OnHomeCityChanging(value);
					this.SendPropertyChanging();
					this._HomeCity = value;
					this.SendPropertyChanged("HomeCity");
					this.OnHomeCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeZIP", DbType="VarChar(10)")]
		public string HomeZIP
		{
			get
			{
				return this._HomeZIP;
			}
			set
			{
				if ((this._HomeZIP != value))
				{
					this.OnHomeZIPChanging(value);
					this.SendPropertyChanging();
					this._HomeZIP = value;
					this.SendPropertyChanged("HomeZIP");
					this.OnHomeZIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeEmail", DbType="NVarChar(50)")]
		public string HomeEmail
		{
			get
			{
				return this._HomeEmail;
			}
			set
			{
				if ((this._HomeEmail != value))
				{
					this.OnHomeEmailChanging(value);
					this.SendPropertyChanging();
					this._HomeEmail = value;
					this.SendPropertyChanged("HomeEmail");
					this.OnHomeEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearAboutID", DbType="Int")]
		public System.Nullable<int> HearAboutID
		{
			get
			{
				return this._HearAboutID;
			}
			set
			{
				if ((this._HearAboutID != value))
				{
					if (this._HearAbout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHearAboutIDChanging(value);
					this.SendPropertyChanging();
					this._HearAboutID = value;
					this.SendPropertyChanged("HearAboutID");
					this.OnHearAboutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_Clients", Storage="_Clients", ThisKey="HomeAddressID", OtherKey="HomeAddressID")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_ParentGuardians", Storage="_ParentGuardians", ThisKey="HomeAddressID", OtherKey="HomeAddressID")]
		public EntitySet<ParentGuardians> ParentGuardians
		{
			get
			{
				return this._ParentGuardians;
			}
			set
			{
				this._ParentGuardians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_Transactions", Storage="_Transactions", ThisKey="HomeAddressID", OtherKey="HomeAddressID")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HearAbouts_HomeAddress", Storage="_HearAbout", ThisKey="HearAboutID", OtherKey="HearAboutID", IsForeignKey=true)]
		public HearAbouts HearAbouts
		{
			get
			{
				return this._HearAbout.Entity;
			}
			set
			{
				HearAbouts previousValue = this._HearAbout.Entity;
				if (((previousValue != value) 
							|| (this._HearAbout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HearAbout.Entity = null;
						previousValue.HomeAddresses.Remove(this);
					}
					this._HearAbout.Entity = value;
					if ((value != null))
					{
						value.HomeAddresses.Add(this);
						this._HearAboutID = value.HearAboutID;
					}
					else
					{
						this._HearAboutID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HearAbouts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_HomeAddress", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				States previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.HomeAddresses.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.HomeAddresses.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = null;
		}
		
		private void attach_ParentGuardians(ParentGuardians entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = this;
		}
		
		private void detach_ParentGuardians(ParentGuardians entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = null;
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.HomeAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Media")]
	public partial class Media : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaID;
		
		private string _MediaTitle;
		
		private int _MediaTypeID;
		
		private EntityRef<MediaType> _MediaType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaIDChanging(int value);
    partial void OnMediaIDChanged();
    partial void OnMediaTitleChanging(string value);
    partial void OnMediaTitleChanged();
    partial void OnMediaTypeIDChanging(int value);
    partial void OnMediaTypeIDChanged();
    #endregion
		
		public Media()
		{
			this._MediaType = default(EntityRef<MediaType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MediaID
		{
			get
			{
				return this._MediaID;
			}
			set
			{
				if ((this._MediaID != value))
				{
					this.OnMediaIDChanging(value);
					this.SendPropertyChanging();
					this._MediaID = value;
					this.SendPropertyChanged("MediaID");
					this.OnMediaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTitle", DbType="VarChar(60)")]
		public string MediaTitle
		{
			get
			{
				return this._MediaTitle;
			}
			set
			{
				if ((this._MediaTitle != value))
				{
					this.OnMediaTitleChanging(value);
					this.SendPropertyChanging();
					this._MediaTitle = value;
					this.SendPropertyChanged("MediaTitle");
					this.OnMediaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeID", DbType="Int NOT NULL")]
		public int MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					if (this._MediaType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaType_Media", Storage="_MediaType", ThisKey="MediaTypeID", OtherKey="MediaTypeID", IsForeignKey=true)]
		public MediaType MediaType
		{
			get
			{
				return this._MediaType.Entity;
			}
			set
			{
				MediaType previousValue = this._MediaType.Entity;
				if (((previousValue != value) 
							|| (this._MediaType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaType.Entity = null;
						previousValue.Medias.Remove(this);
					}
					this._MediaType.Entity = value;
					if ((value != null))
					{
						value.Medias.Add(this);
						this._MediaTypeID = value.MediaTypeID;
					}
					else
					{
						this._MediaTypeID = default(int);
					}
					this.SendPropertyChanged("MediaType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaType")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaTypeID;
		
		private string _MediaType1;
		
		private EntitySet<Media> _Medias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeIDChanging(int value);
    partial void OnMediaTypeIDChanged();
    partial void OnMediaType1Changing(string value);
    partial void OnMediaType1Changed();
    #endregion
		
		public MediaType()
		{
			this._Medias = new EntitySet<Media>(new Action<Media>(this.attach_Medias), new Action<Media>(this.detach_Medias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MediaType", Storage="_MediaType1", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string MediaType1
		{
			get
			{
				return this._MediaType1;
			}
			set
			{
				if ((this._MediaType1 != value))
				{
					this.OnMediaType1Changing(value);
					this.SendPropertyChanging();
					this._MediaType1 = value;
					this.SendPropertyChanged("MediaType1");
					this.OnMediaType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaType_Media", Storage="_Medias", ThisKey="MediaTypeID", OtherKey="MediaTypeID")]
		public EntitySet<Media> Medias
		{
			get
			{
				return this._Medias;
			}
			set
			{
				this._Medias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = this;
		}
		
		private void detach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.MediaType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Month")]
	public partial class Month : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonthID;
		
		private string _MonthName;
		
		private EntitySet<Clients> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonthIDChanging(int value);
    partial void OnMonthIDChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    #endregion
		
		public Month()
		{
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MonthID
		{
			get
			{
				return this._MonthID;
			}
			set
			{
				if ((this._MonthID != value))
				{
					this.OnMonthIDChanging(value);
					this.SendPropertyChanging();
					this._MonthID = value;
					this.SendPropertyChanged("MonthID");
					this.OnMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Month_Clients", Storage="_Clients", ThisKey="MonthID", OtherKey="MonthID")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Month = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Month = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentGuardian")]
	public partial class ParentGuardians : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParentGuardianID;
		
		private string _ParentFirstName;
		
		private string _ParentLastName;
		
		private System.Nullable<int> _HomeAddressID;
		
		private EntityRef<HomeAddress> _HomeAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentGuardianIDChanging(int value);
    partial void OnParentGuardianIDChanged();
    partial void OnParentFirstNameChanging(string value);
    partial void OnParentFirstNameChanged();
    partial void OnParentLastNameChanging(string value);
    partial void OnParentLastNameChanged();
    partial void OnHomeAddressIDChanging(System.Nullable<int> value);
    partial void OnHomeAddressIDChanged();
    #endregion
		
		public ParentGuardians()
		{
			this._HomeAddress = default(EntityRef<HomeAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentGuardianID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParentGuardianID
		{
			get
			{
				return this._ParentGuardianID;
			}
			set
			{
				if ((this._ParentGuardianID != value))
				{
					this.OnParentGuardianIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGuardianID = value;
					this.SendPropertyChanged("ParentGuardianID");
					this.OnParentGuardianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentFirstName", DbType="VarChar(50)")]
		public string ParentFirstName
		{
			get
			{
				return this._ParentFirstName;
			}
			set
			{
				if ((this._ParentFirstName != value))
				{
					this.OnParentFirstNameChanging(value);
					this.SendPropertyChanging();
					this._ParentFirstName = value;
					this.SendPropertyChanged("ParentFirstName");
					this.OnParentFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentLastName", DbType="VarChar(50)")]
		public string ParentLastName
		{
			get
			{
				return this._ParentLastName;
			}
			set
			{
				if ((this._ParentLastName != value))
				{
					this.OnParentLastNameChanging(value);
					this.SendPropertyChanging();
					this._ParentLastName = value;
					this.SendPropertyChanged("ParentLastName");
					this.OnParentLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddressID", DbType="Int")]
		public System.Nullable<int> HomeAddressID
		{
			get
			{
				return this._HomeAddressID;
			}
			set
			{
				if ((this._HomeAddressID != value))
				{
					if (this._HomeAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeAddressIDChanging(value);
					this.SendPropertyChanging();
					this._HomeAddressID = value;
					this.SendPropertyChanged("HomeAddressID");
					this.OnHomeAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_ParentGuardians", Storage="_HomeAddress", ThisKey="HomeAddressID", OtherKey="HomeAddressID", IsForeignKey=true)]
		public HomeAddress HomeAddress
		{
			get
			{
				return this._HomeAddress.Entity;
			}
			set
			{
				HomeAddress previousValue = this._HomeAddress.Entity;
				if (((previousValue != value) 
							|| (this._HomeAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HomeAddress.Entity = null;
						previousValue.ParentGuardians.Remove(this);
					}
					this._HomeAddress.Entity = value;
					if ((value != null))
					{
						value.ParentGuardians.Add(this);
						this._HomeAddressID = value.HomeAddressID;
					}
					else
					{
						this._HomeAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HomeAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ItemNo;
		
		private string _Description;
		
		private string _Size;
		
		private System.Nullable<decimal> _CostPerEach;
		
		private System.Nullable<int> _NoPerPack;
		
		private System.Nullable<decimal> _CostPerPack;
		
		private System.Nullable<decimal> _RetailPrice;
		
		private System.Nullable<short> _QtyOnHand;
		
		private System.Nullable<short> _PhysicalCount;
		
		private System.Nullable<short> _QtyOnOrder;
		
		private System.Nullable<short> _ReorderLevel;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _ProductTypeID;
		
		private System.Nullable<int> _SupplierID;
		
		private EntitySet<Transaction_Detail> _Transaction_Details;
		
		private EntityRef<ProductTypes> _ProductType;
		
		private EntityRef<Suppliers> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnItemNoChanging(string value);
    partial void OnItemNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnCostPerEachChanging(System.Nullable<decimal> value);
    partial void OnCostPerEachChanged();
    partial void OnNoPerPackChanging(System.Nullable<int> value);
    partial void OnNoPerPackChanged();
    partial void OnCostPerPackChanging(System.Nullable<decimal> value);
    partial void OnCostPerPackChanged();
    partial void OnRetailPriceChanging(System.Nullable<decimal> value);
    partial void OnRetailPriceChanged();
    partial void OnQtyOnHandChanging(System.Nullable<short> value);
    partial void OnQtyOnHandChanged();
    partial void OnPhysicalCountChanging(System.Nullable<short> value);
    partial void OnPhysicalCountChanged();
    partial void OnQtyOnOrderChanging(System.Nullable<short> value);
    partial void OnQtyOnOrderChanged();
    partial void OnReorderLevelChanging(System.Nullable<short> value);
    partial void OnReorderLevelChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnProductTypeIDChanging(System.Nullable<int> value);
    partial void OnProductTypeIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    #endregion
		
		public Products()
		{
			this._Transaction_Details = new EntitySet<Transaction_Detail>(new Action<Transaction_Detail>(this.attach_Transaction_Details), new Action<Transaction_Detail>(this.detach_Transaction_Details));
			this._ProductType = default(EntityRef<ProductTypes>);
			this._Supplier = default(EntityRef<Suppliers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNo", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(60)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="VarChar(15)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostPerEach", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> CostPerEach
		{
			get
			{
				return this._CostPerEach;
			}
			set
			{
				if ((this._CostPerEach != value))
				{
					this.OnCostPerEachChanging(value);
					this.SendPropertyChanging();
					this._CostPerEach = value;
					this.SendPropertyChanged("CostPerEach");
					this.OnCostPerEachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoPerPack", DbType="Int")]
		public System.Nullable<int> NoPerPack
		{
			get
			{
				return this._NoPerPack;
			}
			set
			{
				if ((this._NoPerPack != value))
				{
					this.OnNoPerPackChanging(value);
					this.SendPropertyChanging();
					this._NoPerPack = value;
					this.SendPropertyChanged("NoPerPack");
					this.OnNoPerPackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostPerPack", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> CostPerPack
		{
			get
			{
				return this._CostPerPack;
			}
			set
			{
				if ((this._CostPerPack != value))
				{
					this.OnCostPerPackChanging(value);
					this.SendPropertyChanging();
					this._CostPerPack = value;
					this.SendPropertyChanged("CostPerPack");
					this.OnCostPerPackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailPrice", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> RetailPrice
		{
			get
			{
				return this._RetailPrice;
			}
			set
			{
				if ((this._RetailPrice != value))
				{
					this.OnRetailPriceChanging(value);
					this.SendPropertyChanging();
					this._RetailPrice = value;
					this.SendPropertyChanged("RetailPrice");
					this.OnRetailPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyOnHand", DbType="SmallInt")]
		public System.Nullable<short> QtyOnHand
		{
			get
			{
				return this._QtyOnHand;
			}
			set
			{
				if ((this._QtyOnHand != value))
				{
					this.OnQtyOnHandChanging(value);
					this.SendPropertyChanging();
					this._QtyOnHand = value;
					this.SendPropertyChanged("QtyOnHand");
					this.OnQtyOnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalCount", DbType="SmallInt")]
		public System.Nullable<short> PhysicalCount
		{
			get
			{
				return this._PhysicalCount;
			}
			set
			{
				if ((this._PhysicalCount != value))
				{
					this.OnPhysicalCountChanging(value);
					this.SendPropertyChanging();
					this._PhysicalCount = value;
					this.SendPropertyChanged("PhysicalCount");
					this.OnPhysicalCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyOnOrder", DbType="SmallInt")]
		public System.Nullable<short> QtyOnOrder
		{
			get
			{
				return this._QtyOnOrder;
			}
			set
			{
				if ((this._QtyOnOrder != value))
				{
					this.OnQtyOnOrderChanging(value);
					this.SendPropertyChanging();
					this._QtyOnOrder = value;
					this.SendPropertyChanged("QtyOnOrder");
					this.OnQtyOnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReorderLevel", DbType="SmallInt")]
		public System.Nullable<short> ReorderLevel
		{
			get
			{
				return this._ReorderLevel;
			}
			set
			{
				if ((this._ReorderLevel != value))
				{
					this.OnReorderLevelChanging(value);
					this.SendPropertyChanging();
					this._ReorderLevel = value;
					this.SendPropertyChanged("ReorderLevel");
					this.OnReorderLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeID", DbType="Int")]
		public System.Nullable<int> ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Transaction_Detail", Storage="_Transaction_Details", ThisKey="ProductID,ItemNo", OtherKey="ProductID,ItemNo")]
		public EntitySet<Transaction_Detail> Transaction_Details
		{
			get
			{
				return this._Transaction_Details;
			}
			set
			{
				this._Transaction_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTypes_Products", Storage="_ProductType", ThisKey="ProductTypeID", OtherKey="ProductTypeID", IsForeignKey=true)]
		public ProductTypes ProductTypes
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductTypes previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductTypeID = value.ProductTypeID;
					}
					else
					{
						this._ProductTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_Products", Storage="_Supplier", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public Suppliers Suppliers
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Suppliers previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Suppliers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductTypeID;
		
		private string _ProductType1;
		
		private EntitySet<Products> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnProductType1Changing(string value);
    partial void OnProductType1Changed();
    #endregion
		
		public ProductTypes()
		{
			this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductType", Storage="_ProductType1", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string ProductType1
		{
			get
			{
				return this._ProductType1;
			}
			set
			{
				if ((this._ProductType1 != value))
				{
					this.OnProductType1Changing(value);
					this.SendPropertyChanging();
					this._ProductType1 = value;
					this.SendPropertyChanged("ProductType1");
					this.OnProductType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTypes_Products", Storage="_Products", ThisKey="ProductTypeID", OtherKey="ProductTypeID")]
		public EntitySet<Products> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.ProductTypes = this;
		}
		
		private void detach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.ProductTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class States : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _State1;
		
		private EntitySet<Employees> _Employees;
		
		private EntitySet<HomeAddress> _HomeAddresses;
		
		private EntitySet<Suppliers> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnState1Changing(string value);
    partial void OnState1Changed();
    #endregion
		
		public States()
		{
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			this._HomeAddresses = new EntitySet<HomeAddress>(new Action<HomeAddress>(this.attach_HomeAddresses), new Action<HomeAddress>(this.detach_HomeAddresses));
			this._Suppliers = new EntitySet<Suppliers>(new Action<Suppliers>(this.attach_Suppliers), new Action<Suppliers>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="State", Storage="_State1", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string State1
		{
			get
			{
				return this._State1;
			}
			set
			{
				if ((this._State1 != value))
				{
					this.OnState1Changing(value);
					this.SendPropertyChanging();
					this._State1 = value;
					this.SendPropertyChanged("State1");
					this.OnState1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Employees", Storage="_Employees", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_HomeAddress", Storage="_HomeAddresses", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<HomeAddress> HomeAddresses
		{
			get
			{
				return this._HomeAddresses;
			}
			set
			{
				this._HomeAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Suppliers", Storage="_Suppliers", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Suppliers> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
		
		private void attach_HomeAddresses(HomeAddress entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_HomeAddresses(HomeAddress entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
		
		private void attach_Suppliers(Suppliers entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_Suppliers(Suppliers entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StylistTimes")]
	public partial class StylistTimes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StylistTimeID;
		
		private System.Nullable<int> _TimeMinutes;
		
		private System.Nullable<int> _EmployeeID;
		
		private EntityRef<Employees> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStylistTimeIDChanging(int value);
    partial void OnStylistTimeIDChanged();
    partial void OnTimeMinutesChanging(System.Nullable<int> value);
    partial void OnTimeMinutesChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public StylistTimes()
		{
			this._Employee = default(EntityRef<Employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StylistTimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StylistTimeID
		{
			get
			{
				return this._StylistTimeID;
			}
			set
			{
				if ((this._StylistTimeID != value))
				{
					this.OnStylistTimeIDChanging(value);
					this.SendPropertyChanging();
					this._StylistTimeID = value;
					this.SendPropertyChanged("StylistTimeID");
					this.OnStylistTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeMinutes", DbType="Int")]
		public System.Nullable<int> TimeMinutes
		{
			get
			{
				return this._TimeMinutes;
			}
			set
			{
				if ((this._TimeMinutes != value))
				{
					this.OnTimeMinutesChanging(value);
					this.SendPropertyChanging();
					this._TimeMinutes = value;
					this.SendPropertyChanged("TimeMinutes");
					this.OnTimeMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_StylistTimes", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employees previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.StylistTimes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.StylistTimes.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Suppliers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierID;
		
		private string _BusinessName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<int> _StateID;
		
		private string _Zip;
		
		private System.Nullable<int> _CountryID;
		
		private string _Website;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private EntitySet<Products> _Products;
		
		private EntityRef<Countries> _Country;
		
		private EntityRef<States> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnBusinessNameChanging(string value);
    partial void OnBusinessNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Suppliers()
		{
			this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
			this._Country = default(EntityRef<Countries>);
			this._State = default(EntityRef<States>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessName
		{
			get
			{
				return this._BusinessName;
			}
			set
			{
				if ((this._BusinessName != value))
				{
					this.OnBusinessNameChanging(value);
					this.SendPropertyChanging();
					this._BusinessName = value;
					this.SendPropertyChanged("BusinessName");
					this.OnBusinessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(50)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(30)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(25)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(25)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_Products", Storage="_Products", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<Products> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countries_Suppliers", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Countries Countries
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Countries previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Countries");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Suppliers", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				States previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers = this;
		}
		
		private void detach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private System.Nullable<System.DateTime> _TransDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _HomeAddressID;
		
		private EntitySet<Transaction_Detail> _Transaction_Details;
		
		private EntityRef<Employees> _Employees;
		
		private EntityRef<HomeAddress> _HomeAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnTransDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnHomeAddressIDChanging(System.Nullable<int> value);
    partial void OnHomeAddressIDChanged();
    #endregion
		
		public Transactions()
		{
			this._Transaction_Details = new EntitySet<Transaction_Detail>(new Action<Transaction_Detail>(this.attach_Transaction_Details), new Action<Transaction_Detail>(this.detach_Transaction_Details));
			this._Employees = default(EntityRef<Employees>);
			this._HomeAddress = default(EntityRef<HomeAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransDate", DbType="Date")]
		public System.Nullable<System.DateTime> TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this.OnTransDateChanging(value);
					this.SendPropertyChanging();
					this._TransDate = value;
					this.SendPropertyChanged("TransDate");
					this.OnTransDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddressID", DbType="Int")]
		public System.Nullable<int> HomeAddressID
		{
			get
			{
				return this._HomeAddressID;
			}
			set
			{
				if ((this._HomeAddressID != value))
				{
					if (this._HomeAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeAddressIDChanging(value);
					this.SendPropertyChanging();
					this._HomeAddressID = value;
					this.SendPropertyChanged("HomeAddressID");
					this.OnHomeAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transactions_Transaction_Detail", Storage="_Transaction_Details", ThisKey="TransactionID", OtherKey="TransactionID")]
		public EntitySet<Transaction_Detail> Transaction_Details
		{
			get
			{
				return this._Transaction_Details;
			}
			set
			{
				this._Transaction_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Transactions", Storage="_Employees", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HomeAddress_Transactions", Storage="_HomeAddress", ThisKey="HomeAddressID", OtherKey="HomeAddressID", IsForeignKey=true)]
		public HomeAddress HomeAddress
		{
			get
			{
				return this._HomeAddress.Entity;
			}
			set
			{
				HomeAddress previousValue = this._HomeAddress.Entity;
				if (((previousValue != value) 
							|| (this._HomeAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HomeAddress.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._HomeAddress.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._HomeAddressID = value.HomeAddressID;
					}
					else
					{
						this._HomeAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HomeAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Transactions = this;
		}
		
		private void detach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Transactions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class ServiceS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceID;
		
		private string _ServiceName;
		
		private decimal _ServicePrice;
		
		private EntitySet<Transaction_Detail> _Transaction_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnServicePriceChanging(decimal value);
    partial void OnServicePriceChanged();
    #endregion
		
		public ServiceS()
		{
			this._Transaction_Details = new EntitySet<Transaction_Detail>(new Action<Transaction_Detail>(this.attach_Transaction_Details), new Action<Transaction_Detail>(this.detach_Transaction_Details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePrice", DbType="Decimal(5,2) NOT NULL")]
		public decimal ServicePrice
		{
			get
			{
				return this._ServicePrice;
			}
			set
			{
				if ((this._ServicePrice != value))
				{
					this.OnServicePriceChanging(value);
					this.SendPropertyChanging();
					this._ServicePrice = value;
					this.SendPropertyChanged("ServicePrice");
					this.OnServicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceS_Transaction_Detail", Storage="_Transaction_Details", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<Transaction_Detail> Transaction_Details
		{
			get
			{
				return this._Transaction_Details;
			}
			set
			{
				this._Transaction_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceS = this;
		}
		
		private void detach_Transaction_Details(Transaction_Detail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transaction_Details")]
	public partial class Transaction_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UniqueID;
		
		private int _TransactionID;
		
		private string _ClientFirstName;
		
		private string _ClientLastName;
		
		private int _ServiceID;
		
		private System.Nullable<short> _ServiceQuantity;
		
		private int _ProductID;
		
		private string _ItemNo;
		
		private System.Nullable<short> _ProductQuantity;
		
		private System.Nullable<decimal> _Discount;
		
		private EntityRef<Products> _Products;
		
		private EntityRef<ServiceS> _ServiceS;
		
		private EntityRef<Transactions> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUniqueIDChanging(int value);
    partial void OnUniqueIDChanged();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnClientFirstNameChanging(string value);
    partial void OnClientFirstNameChanged();
    partial void OnClientLastNameChanging(string value);
    partial void OnClientLastNameChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnServiceQuantityChanging(System.Nullable<short> value);
    partial void OnServiceQuantityChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnItemNoChanging(string value);
    partial void OnItemNoChanged();
    partial void OnProductQuantityChanging(System.Nullable<short> value);
    partial void OnProductQuantityChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    #endregion
		
		public Transaction_Detail()
		{
			this._Products = default(EntityRef<Products>);
			this._ServiceS = default(EntityRef<ServiceS>);
			this._Transactions = default(EntityRef<Transactions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._Transactions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientFirstName", DbType="VarChar(25)")]
		public string ClientFirstName
		{
			get
			{
				return this._ClientFirstName;
			}
			set
			{
				if ((this._ClientFirstName != value))
				{
					this.OnClientFirstNameChanging(value);
					this.SendPropertyChanging();
					this._ClientFirstName = value;
					this.SendPropertyChanged("ClientFirstName");
					this.OnClientFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLastName", DbType="VarChar(30)")]
		public string ClientLastName
		{
			get
			{
				return this._ClientLastName;
			}
			set
			{
				if ((this._ClientLastName != value))
				{
					this.OnClientLastNameChanging(value);
					this.SendPropertyChanging();
					this._ClientLastName = value;
					this.SendPropertyChanged("ClientLastName");
					this.OnClientLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._ServiceS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceQuantity", DbType="SmallInt")]
		public System.Nullable<short> ServiceQuantity
		{
			get
			{
				return this._ServiceQuantity;
			}
			set
			{
				if ((this._ServiceQuantity != value))
				{
					this.OnServiceQuantityChanging(value);
					this.SendPropertyChanging();
					this._ServiceQuantity = value;
					this.SendPropertyChanged("ServiceQuantity");
					this.OnServiceQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNo", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductQuantity", DbType="SmallInt")]
		public System.Nullable<short> ProductQuantity
		{
			get
			{
				return this._ProductQuantity;
			}
			set
			{
				if ((this._ProductQuantity != value))
				{
					this.OnProductQuantityChanging(value);
					this.SendPropertyChanging();
					this._ProductQuantity = value;
					this.SendPropertyChanged("ProductQuantity");
					this.OnProductQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Transaction_Detail", Storage="_Products", ThisKey="ProductID,ItemNo", OtherKey="ProductID,ItemNo", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Transaction_Details.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Transaction_Details.Add(this);
						this._ProductID = value.ProductID;
						this._ItemNo = value.ItemNo;
					}
					else
					{
						this._ProductID = default(int);
						this._ItemNo = default(string);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceS_Transaction_Detail", Storage="_ServiceS", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public ServiceS ServiceS
		{
			get
			{
				return this._ServiceS.Entity;
			}
			set
			{
				ServiceS previousValue = this._ServiceS.Entity;
				if (((previousValue != value) 
							|| (this._ServiceS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceS.Entity = null;
						previousValue.Transaction_Details.Remove(this);
					}
					this._ServiceS.Entity = value;
					if ((value != null))
					{
						value.Transaction_Details.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("ServiceS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transactions_Transaction_Detail", Storage="_Transactions", ThisKey="TransactionID", OtherKey="TransactionID", IsForeignKey=true)]
		public Transactions Transactions
		{
			get
			{
				return this._Transactions.Entity;
			}
			set
			{
				Transactions previousValue = this._Transactions.Entity;
				if (((previousValue != value) 
							|| (this._Transactions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transactions.Entity = null;
						previousValue.Transaction_Details.Remove(this);
					}
					this._Transactions.Entity = value;
					if ((value != null))
					{
						value.Transaction_Details.Add(this);
						this._TransactionID = value.TransactionID;
					}
					else
					{
						this._TransactionID = default(int);
					}
					this.SendPropertyChanged("Transactions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
